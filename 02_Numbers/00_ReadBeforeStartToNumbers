
Patterns in Number Problem:
1. Using Remainder (num % 10), Quotient (num / 10), or Power (2^n, 10^n) concepts
  1.1. CheckEvenOddNumber – Uses remainder (num % 2) to check if a number is even or odd.
  1.2. CountDigitsInNumber – Uses repeated division (num / 10) to count digits.
  1.3. ReverseNumber – Extracts digits using remainder and rebuilds number in reverse.
  1.4. CheckPalindromeNumber – Compares reversed number with the original.
  1.5. CheckPrimeNumber – Uses loop & modulus to check divisibility.
  1.6. PrintPrimeNumbers1ToN – Loops through numbers from 1 to N, prints primes.
  1.7. CheckPrimePalindrome – Checks both prime and palindrome properties.
  1.8. CheckArmstrongNumber – Sum of digits^number_of_digits = original number.
  1.9. RangeOfArmstrongNumber – Finds Armstrong numbers in a given range.
  1.10. CheckStrongNumber – Sum of factorial of digits = original number.
  1.11. RangeOfStrongNumber – Finds all strong numbers within a range.
  1.12. CheckPerfectNumber – Sum of proper divisors = original number.
  1.13. RangeOfPerfectNumber – Finds perfect numbers in a range.
  1.14. SumOfPrimeNumberOfGivenRange - Uses loop & modulus to check divisibility and keep adding prime numbers
  1.15. DecimalToBinary - Get remainder by diving given number 2, keep adding remainder to string and divide given number by 2
  1.16. BinaryToDecimal - Get the remainder by dividing the given number by 10, keep adding the remainder multiplied by 2 raised to the power of its current position, and remove the last digit by dividing the number by 10
  1.17. DecimalToOctal - Get remainder by diving given number 8, keep adding remainder to string and divide given number by 8
  1.18. OctalToDecimal - Get the remainder by dividing the given number by 10, keep adding the remainder multiplied by 8 raised to the power of its current position, and remove the last digit by dividing the number by 10
  1.19. DecimalToHexadecimal - Get remainder by diving given number 16, keep adding remainder to string and divide given number by 16
  1.20. HexadecimalToDecimal - 
  1.21. DecimalToBinaryOctalHexadecimal -
  1.22. GCDOrHCFForTwoNumbers - Devide both the given number by starts from given smaller number till 1 and check if any highest number devides both the number and leave zero as a remainder.
  1.23. LowestCommonMultipleLCM - Find GCD and futher multiply given two number and devide it by GCD
  1.24. PrimeFactors - Divide the given number by all numbers from 2 to that number, and select only those divisors that are prime (i.e., numbers that divide completely and are themselves prime). These are the prime factors of the number.
  1.25. AllDivisorsOfNumber - finds all divisors of a number by looping from 1 to √n, checking divisibility, and printing both i and n/i to list all divisors in ascending order in O(√n) time.


2. Logical Base
  2.1. Factorial – Product of numbers from 1 to n.
  2.2. FactorialOfRange1ToN – Prints factorial for each number from 1 to N.
  2.3. TrailingZerosInFactorial – Counts zeros at the end of factorial (caused by 2 × 5 pairs) or devide the given number with multiple of 5 and store its output in res.
  2.3. FibonacciNumber - addition of previous 2 numbers
  2.4. RangeOfFibonacciNumbers - find the serial from 1 to n with addtion of previous 2 numbers
  2.5. Swap2NumbersUsing3rdVariable - assign one value to another and swap
  2.6. Swap2Numberswithout3rdVariable - do add substraction do swap 2 numbers
  2.7. Swap2Numberswithout3rdVariable.cs - do add substraction do swap 3 numbers



